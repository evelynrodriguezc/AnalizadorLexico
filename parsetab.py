
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGNMENT BEGIN BOOLEAN CASE CHAR CLASS COLON COMMA CONST CONSTRUCTOR CREATE DEQUAL DISTINT DIV DIVIDE DO DOT DOWNTO ELSE END ENDC EQUAL FILE FIN FOR FUNCTION GOTO GREATER GREATEREQUAL HASHTAG ID IF IN INTEGER LBLOCK LBRACKET LESS LESSEQUAL LPAREN MINUS MOD NOT NUMBER OF OR PLUS POINTER PROCEDURE PROGRAM QUOTES RBLOCK RBRACKET READLN REAL RECORD REPEAT RPAREN SEMICOLON SET SHL SHR STRING THEN TIMES TO TXT TYPE UNIT UNTIL USES VAR WHILE WITH WRITELN XORprogram : PROGRAM ID SEMICOLON declaration_list declaration_list : declaration_list  declarationdeclaration_list : declarationdeclaration : var_declaration\n\t\t\t\t   | block_declarationvar_declaration :  VAR var_declaration2 COLON type_specifier SEMICOLONvar_declaration2 : ID COMMA var_declaration2\n\t\t\t\t\t\t| IDtype_specifier : INTEGERtype_specifier : REALtype_specifier : CHARtype_specifier : BOOLEANtype_specifier : STRINGblock_declaration : BEGIN compount_stmt ENDcompount_stmt : statement_list statement_list : statement_list statementstatement_list : emptystatement : expression_stmt\n\t\t\t\t| selection_stmt\n\t\t\t\t| iteration_stmt\n\t\t\t\t| io_stmt\n\tio_stmt : WRITELN LPAREN TXT RPAREN SEMICOLONio_stmt : WRITELN LPAREN TXT RPAREN COMMA expression2 SEMICOLONio_stmt : READLN LPAREN ID RPAREN SEMICOLONexpression2 : expression COMMA expression2\n\t\t\t\t\t| expression expression_stmt : expression SEMICOLONexpression_stmt : SEMICOLONselection_stmt : IF LPAREN expression RPAREN THEN statement ELSE statementselection_stmt : IF LPAREN expression RPAREN THEN BEGIN statement END ELSE statementselection_stmt : IF LPAREN expression RPAREN THEN BEGIN statement END ELSE  BEGIN statement ENDselection_stmt : IF LPAREN expression RPAREN THEN statement ELSE BEGIN statement ENDselection_stmt : IF LPAREN expression RPAREN THEN statementselection_stmt : IF LPAREN expression RPAREN THEN BEGIN statement ENDiteration_stmt : WHILE LPAREN expression RPAREN DO BEGIN statement END SEMICOLONiteration_stmt : WHILE LPAREN expression RPAREN DO BEGIN statement ENDexpression : var EQUAL expressionexpression : simple_expressionexpression : var ASSIGNMENT expressionvar : IDsimple_expression : additive_expression relop additive_expressionsimple_expression : additive_expressionrelop : LESS\n\t\t\t| LESSEQUAL\n\t\t\t| GREATER\n\t\t\t| GREATEREQUAL\n\t\t\t| DEQUAL\n\t\t\t| DISTINT\n\tadditive_expression : additive_expression addop term\n\n        additive_expression : termaddop : PLUS\n\t\t\t| MINUS\n\tterm : term mulop factorterm : factormulop : \tTIMES\n\t\t\t\t| DIVIDE\n\tfactor : LPAREN expression RPARENfactor : varfactor : NUMBERempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,6,7,8,11,19,67,],[0,-1,-3,-4,-5,-2,-14,-6,]),'ID':([2,9,10,15,16,18,20,21,22,23,24,26,28,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,83,85,86,87,88,89,90,93,96,97,98,99,100,101,104,105,106,107,108,110,],[3,13,-60,32,-17,13,-16,-18,-19,-20,-21,-28,32,-27,32,32,72,32,32,32,32,-43,-44,-45,-46,-47,-48,-51,-52,32,-55,-56,32,-22,32,-24,-33,32,32,32,-23,32,-29,32,-34,-36,32,-35,-32,32,-30,-31,]),'SEMICOLON':([3,10,15,16,20,21,22,23,24,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,46,69,73,74,75,76,77,78,81,82,83,85,87,88,89,90,91,92,93,96,98,99,100,101,102,104,105,106,107,108,110,],[4,-60,26,-17,-16,-18,-19,-20,-21,46,-28,-40,-58,-38,-42,-50,-54,-59,67,-9,-10,-11,-12,-13,-27,-57,-37,-39,-41,-58,-49,-53,85,87,26,-22,-24,-33,26,26,96,-26,26,-23,-29,26,-34,105,-25,26,-35,-32,26,-30,-31,]),'VAR':([4,5,6,7,8,11,19,67,],[9,9,-3,-4,-5,-2,-14,-6,]),'BEGIN':([4,5,6,7,8,11,19,67,83,84,93,104,],[10,10,-3,-4,-5,-2,-14,-6,89,90,99,107,]),'IF':([10,15,16,20,21,22,23,24,26,46,83,85,87,88,89,90,93,96,98,99,100,101,104,105,106,107,108,110,],[-60,27,-17,-16,-18,-19,-20,-21,-28,-27,27,-22,-24,-33,27,27,27,-23,-29,27,-34,-36,27,-35,-32,27,-30,-31,]),'WHILE':([10,15,16,20,21,22,23,24,26,46,83,85,87,88,89,90,93,96,98,99,100,101,104,105,106,107,108,110,],[-60,29,-17,-16,-18,-19,-20,-21,-28,-27,29,-22,-24,-33,29,29,29,-23,-29,29,-34,-36,29,-35,-32,29,-30,-31,]),'WRITELN':([10,15,16,20,21,22,23,24,26,46,83,85,87,88,89,90,93,96,98,99,100,101,104,105,106,107,108,110,],[-60,30,-17,-16,-18,-19,-20,-21,-28,-27,30,-22,-24,-33,30,30,30,-23,-29,30,-34,-36,30,-35,-32,30,-30,-31,]),'READLN':([10,15,16,20,21,22,23,24,26,46,83,85,87,88,89,90,93,96,98,99,100,101,104,105,106,107,108,110,],[-60,31,-17,-16,-18,-19,-20,-21,-28,-27,31,-22,-24,-33,31,31,31,-23,-29,31,-34,-36,31,-35,-32,31,-30,-31,]),'LPAREN':([10,15,16,20,21,22,23,24,26,27,28,29,30,31,46,47,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,83,85,86,87,88,89,90,93,96,97,98,99,100,101,104,105,106,107,108,110,],[-60,28,-17,-16,-18,-19,-20,-21,-28,47,28,49,50,51,-27,28,28,28,28,28,28,-43,-44,-45,-46,-47,-48,-51,-52,28,-55,-56,28,-22,28,-24,-33,28,28,28,-23,28,-29,28,-34,-36,28,-35,-32,28,-30,-31,]),'NUMBER':([10,15,16,20,21,22,23,24,26,28,46,47,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,83,85,86,87,88,89,90,93,96,97,98,99,100,101,104,105,106,107,108,110,],[-60,38,-17,-16,-18,-19,-20,-21,-28,38,-27,38,38,38,38,38,38,-43,-44,-45,-46,-47,-48,-51,-52,38,-55,-56,38,-22,38,-24,-33,38,38,38,-23,38,-29,38,-34,-36,38,-35,-32,38,-30,-31,]),'END':([10,14,15,16,20,21,22,23,24,26,46,85,87,88,94,95,96,98,100,101,103,105,106,108,109,110,],[-60,19,-15,-17,-16,-18,-19,-20,-21,-28,-27,-22,-24,-33,100,101,-23,-29,-34,-36,106,-35,-32,-30,110,-31,]),'COLON':([12,13,45,],[17,-8,-7,]),'COMMA':([13,32,33,34,35,36,37,38,69,73,74,75,76,77,78,81,92,],[18,-40,-58,-38,-42,-50,-54,-59,-57,-37,-39,-41,-58,-49,-53,86,97,]),'INTEGER':([17,],[40,]),'REAL':([17,],[41,]),'CHAR':([17,],[42,]),'BOOLEAN':([17,],[43,]),'STRING':([17,],[44,]),'ELSE':([21,22,23,24,26,46,85,87,88,96,98,100,101,105,106,108,110,],[-18,-19,-20,-21,-28,-27,-22,-24,93,-23,-29,104,-36,-35,-32,-30,-31,]),'EQUAL':([32,33,],[-40,52,]),'ASSIGNMENT':([32,33,],[-40,53,]),'TIMES':([32,33,36,37,38,69,76,77,78,],[-40,-58,65,-54,-59,-57,-58,65,-53,]),'DIVIDE':([32,33,36,37,38,69,76,77,78,],[-40,-58,66,-54,-59,-57,-58,66,-53,]),'LESS':([32,33,35,36,37,38,69,76,77,78,],[-40,-58,56,-50,-54,-59,-57,-58,-49,-53,]),'LESSEQUAL':([32,33,35,36,37,38,69,76,77,78,],[-40,-58,57,-50,-54,-59,-57,-58,-49,-53,]),'GREATER':([32,33,35,36,37,38,69,76,77,78,],[-40,-58,58,-50,-54,-59,-57,-58,-49,-53,]),'GREATEREQUAL':([32,33,35,36,37,38,69,76,77,78,],[-40,-58,59,-50,-54,-59,-57,-58,-49,-53,]),'DEQUAL':([32,33,35,36,37,38,69,76,77,78,],[-40,-58,60,-50,-54,-59,-57,-58,-49,-53,]),'DISTINT':([32,33,35,36,37,38,69,76,77,78,],[-40,-58,61,-50,-54,-59,-57,-58,-49,-53,]),'PLUS':([32,33,35,36,37,38,69,75,76,77,78,],[-40,-58,62,-50,-54,-59,-57,62,-58,-49,-53,]),'MINUS':([32,33,35,36,37,38,69,75,76,77,78,],[-40,-58,63,-50,-54,-59,-57,63,-58,-49,-53,]),'RPAREN':([32,33,34,35,36,37,38,48,68,69,70,71,72,73,74,75,76,77,78,],[-40,-58,-38,-42,-50,-54,-59,69,79,-57,80,81,82,-37,-39,-41,-58,-49,-53,]),'TXT':([50,],[71,]),'THEN':([79,],[83,]),'DO':([80,],[84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([4,],[5,]),'declaration':([4,5,],[6,11,]),'var_declaration':([4,5,],[7,7,]),'block_declaration':([4,5,],[8,8,]),'var_declaration2':([9,18,],[12,45,]),'compount_stmt':([10,],[14,]),'statement_list':([10,],[15,]),'empty':([10,],[16,]),'statement':([15,83,89,90,93,99,104,107,],[20,88,94,95,98,103,108,109,]),'expression_stmt':([15,83,89,90,93,99,104,107,],[21,21,21,21,21,21,21,21,]),'selection_stmt':([15,83,89,90,93,99,104,107,],[22,22,22,22,22,22,22,22,]),'iteration_stmt':([15,83,89,90,93,99,104,107,],[23,23,23,23,23,23,23,23,]),'io_stmt':([15,83,89,90,93,99,104,107,],[24,24,24,24,24,24,24,24,]),'expression':([15,28,47,49,52,53,83,86,89,90,93,97,99,104,107,],[25,48,68,70,73,74,25,92,25,25,25,92,25,25,25,]),'var':([15,28,47,49,52,53,54,55,64,83,86,89,90,93,97,99,104,107,],[33,33,33,33,33,33,76,76,76,33,33,33,33,33,33,33,33,33,]),'simple_expression':([15,28,47,49,52,53,83,86,89,90,93,97,99,104,107,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'additive_expression':([15,28,47,49,52,53,54,83,86,89,90,93,97,99,104,107,],[35,35,35,35,35,35,75,35,35,35,35,35,35,35,35,35,]),'term':([15,28,47,49,52,53,54,55,83,86,89,90,93,97,99,104,107,],[36,36,36,36,36,36,36,77,36,36,36,36,36,36,36,36,36,]),'factor':([15,28,47,49,52,53,54,55,64,83,86,89,90,93,97,99,104,107,],[37,37,37,37,37,37,37,37,78,37,37,37,37,37,37,37,37,37,]),'type_specifier':([17,],[39,]),'relop':([35,],[54,]),'addop':([35,75,],[55,55,]),'mulop':([36,77,],[64,64,]),'expression2':([86,97,],[91,102,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_list','program',4,'p_program','minic_parser.py',14),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','minic_parser.py',18),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','minic_parser.py',22),
  ('declaration -> var_declaration','declaration',1,'p_declaration','minic_parser.py',26),
  ('declaration -> block_declaration','declaration',1,'p_declaration','minic_parser.py',27),
  ('var_declaration -> VAR var_declaration2 COLON type_specifier SEMICOLON','var_declaration',5,'p_var_declaration_1','minic_parser.py',31),
  ('var_declaration2 -> ID COMMA var_declaration2','var_declaration2',3,'p_var_declaration_2','minic_parser.py',35),
  ('var_declaration2 -> ID','var_declaration2',1,'p_var_declaration_2','minic_parser.py',36),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier_1','minic_parser.py',40),
  ('type_specifier -> REAL','type_specifier',1,'p_type_specifier_2','minic_parser.py',44),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier_3','minic_parser.py',48),
  ('type_specifier -> BOOLEAN','type_specifier',1,'p_type_specifier_4','minic_parser.py',52),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier_5','minic_parser.py',56),
  ('block_declaration -> BEGIN compount_stmt END','block_declaration',3,'p_block_declaration','minic_parser.py',60),
  ('compount_stmt -> statement_list','compount_stmt',1,'p_compount_stmt','minic_parser.py',64),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','minic_parser.py',68),
  ('statement_list -> empty','statement_list',1,'p_statement_list_2','minic_parser.py',72),
  ('statement -> expression_stmt','statement',1,'p_statement','minic_parser.py',76),
  ('statement -> selection_stmt','statement',1,'p_statement','minic_parser.py',77),
  ('statement -> iteration_stmt','statement',1,'p_statement','minic_parser.py',78),
  ('statement -> io_stmt','statement',1,'p_statement','minic_parser.py',79),
  ('io_stmt -> WRITELN LPAREN TXT RPAREN SEMICOLON','io_stmt',5,'p_io_stmt_1','minic_parser.py',84),
  ('io_stmt -> WRITELN LPAREN TXT RPAREN COMMA expression2 SEMICOLON','io_stmt',7,'p_io_stmt_2','minic_parser.py',87),
  ('io_stmt -> READLN LPAREN ID RPAREN SEMICOLON','io_stmt',5,'p_io_stmt_3','minic_parser.py',90),
  ('expression2 -> expression COMMA expression2','expression2',3,'p_expression2_1','minic_parser.py',93),
  ('expression2 -> expression','expression2',1,'p_expression2_1','minic_parser.py',94),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt_1','minic_parser.py',97),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt_2','minic_parser.py',101),
  ('selection_stmt -> IF LPAREN expression RPAREN THEN statement ELSE statement','selection_stmt',8,'p_selection_stmt_1','minic_parser.py',105),
  ('selection_stmt -> IF LPAREN expression RPAREN THEN BEGIN statement END ELSE statement','selection_stmt',10,'p_selection_stmt_2','minic_parser.py',108),
  ('selection_stmt -> IF LPAREN expression RPAREN THEN BEGIN statement END ELSE BEGIN statement END','selection_stmt',12,'p_selection_stmt_3','minic_parser.py',111),
  ('selection_stmt -> IF LPAREN expression RPAREN THEN statement ELSE BEGIN statement END','selection_stmt',10,'p_selection_stmt_4','minic_parser.py',114),
  ('selection_stmt -> IF LPAREN expression RPAREN THEN statement','selection_stmt',6,'p_selection_stmt_5','minic_parser.py',117),
  ('selection_stmt -> IF LPAREN expression RPAREN THEN BEGIN statement END','selection_stmt',8,'p_selection_stmt_6','minic_parser.py',120),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN DO BEGIN statement END SEMICOLON','iteration_stmt',9,'p_iteration_stmt_1','minic_parser.py',124),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN DO BEGIN statement END','iteration_stmt',8,'p_iteration_stmt_2','minic_parser.py',128),
  ('expression -> var EQUAL expression','expression',3,'p_expression_1','minic_parser.py',132),
  ('expression -> simple_expression','expression',1,'p_expression_2','minic_parser.py',136),
  ('expression -> var ASSIGNMENT expression','expression',3,'p_expression_3','minic_parser.py',140),
  ('var -> ID','var',1,'p_var_1','minic_parser.py',144),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression_1','minic_parser.py',148),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression_2','minic_parser.py',152),
  ('relop -> LESS','relop',1,'p_relop','minic_parser.py',156),
  ('relop -> LESSEQUAL','relop',1,'p_relop','minic_parser.py',157),
  ('relop -> GREATER','relop',1,'p_relop','minic_parser.py',158),
  ('relop -> GREATEREQUAL','relop',1,'p_relop','minic_parser.py',159),
  ('relop -> DEQUAL','relop',1,'p_relop','minic_parser.py',160),
  ('relop -> DISTINT','relop',1,'p_relop','minic_parser.py',161),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression_1','minic_parser.py',166),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression_2','minic_parser.py',172),
  ('addop -> PLUS','addop',1,'p_addop','minic_parser.py',176),
  ('addop -> MINUS','addop',1,'p_addop','minic_parser.py',177),
  ('term -> term mulop factor','term',3,'p_term_1','minic_parser.py',182),
  ('term -> factor','term',1,'p_term_2','minic_parser.py',186),
  ('mulop -> TIMES','mulop',1,'p_mulop','minic_parser.py',190),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','minic_parser.py',191),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_1','minic_parser.py',196),
  ('factor -> var','factor',1,'p_factor_2','minic_parser.py',200),
  ('factor -> NUMBER','factor',1,'p_factor_4','minic_parser.py',204),
  ('empty -> <empty>','empty',0,'p_empty','minic_parser.py',208),
]
